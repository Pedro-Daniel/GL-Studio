[gd_scene load_steps=44 format=2]

[ext_resource path="res://Grid_Of_Creation_Piano/Scenes/Little_Key.tscn" type="PackedScene" id=1]
[ext_resource path="res://Grid_Of_Creation_Piano/Scripts/Little_Scale.gd" type="Script" id=2]

[sub_resource type="StyleBoxFlat" id=1]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="StyleBoxFlat" id=2]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="StyleBoxFlat" id=3]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="StyleBoxFlat" id=4]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="StyleBoxFlat" id=5]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="StyleBoxFlat" id=6]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=7]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=8]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=9]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[sub_resource type="StyleBoxFlat" id=10]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=11]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=12]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=13]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[sub_resource type="StyleBoxFlat" id=14]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=15]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=16]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=17]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[sub_resource type="StyleBoxFlat" id=18]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=19]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=20]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=21]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[sub_resource type="StyleBoxFlat" id=22]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=23]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=24]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=25]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[sub_resource type="StyleBoxFlat" id=26]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=27]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=28]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=29]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[sub_resource type="StyleBoxFlat" id=30]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=31]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=32]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=33]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[sub_resource type="StyleBoxFlat" id=34]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=35]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=36]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=37]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[sub_resource type="StyleBoxFlat" id=38]
bg_color = Color( 0.643137, 0.643137, 0.643137, 1 )

[sub_resource type="StyleBoxFlat" id=39]
bg_color = Color( 0.737255, 0.0705882, 0.0705882, 1 )

[sub_resource type="StyleBoxFlat" id=40]
resource_local_to_scene = true
bg_color = Color( 1, 1, 1, 1 )

[sub_resource type="GDScript" id=41]
script/source = "extends Button

const root12 = 1.05946309436

onready var my_position_in_scale = self.get_index()
onready var current_instrument = \"Piano\"

func _ready():
	yield(get_tree(),\"idle_frame\")
	set_my_color()
	set_my_sound()
	set_my_pitch()

func set_my_color():
	# Intervalo das notas pretas
	var excep = [1,3,5,8,10]
	
	# Notas pretas para qualquer tamanho de teclado
	if my_position_in_scale > excep.max():
		for i in range(5):
			excep[i] += 12 * int(my_position_in_scale/12)
	
	# Diz se uma tecla deve ser preta ou branca
	if  my_position_in_scale in excep:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.black)
	else:
		get(\"custom_styles/normal\").set(\"bg_color\",Color.whitesmoke)

func set_my_sound():
	# Atribui o som especifico ao node especifico e gera o stream
	var sound = \"res://Assets/Samples/Pianos/\"+current_instrument+\".ogg\"
	$Audio.stream = load(sound)

func set_my_pitch():
	$Audio.pitch_scale *= pow(root12,((4 + 2*11) - my_position_in_scale)) # 4 + 2*11 Significa duas escalas pra tras, começando por Do

func _on_Key_pressed():
	$Audio.play()
"

[node name="Little_Scale" type="VBoxContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Little_Key" parent="." instance=ExtResource( 1 )]
margin_right = 1024.0
margin_bottom = 39.0
rect_rotation = 0.0
custom_styles/normal = SubResource( 1 )

[node name="Little_Key2" parent="." instance=ExtResource( 1 )]
margin_top = 43.0
margin_right = 1024.0
margin_bottom = 82.0
rect_rotation = 0.0
custom_styles/normal = SubResource( 2 )

[node name="Little_Key3" parent="." instance=ExtResource( 1 )]
margin_top = 86.0
margin_right = 1024.0
margin_bottom = 125.0
rect_rotation = 0.0
custom_styles/normal = SubResource( 3 )

[node name="Little_Key4" parent="." instance=ExtResource( 1 )]
margin_top = 129.0
margin_right = 1024.0
margin_bottom = 168.0
rect_rotation = 0.0
custom_styles/normal = SubResource( 4 )

[node name="Little_Key5" parent="." instance=ExtResource( 1 )]
margin_top = 172.0
margin_right = 1024.0
margin_bottom = 211.0
rect_rotation = 0.0
custom_styles/normal = SubResource( 5 )

[node name="Little_Key6" parent="." instance=ExtResource( 1 )]
margin_top = 215.0
margin_right = 1024.0
margin_bottom = 254.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 6 )
custom_styles/pressed = SubResource( 7 )
custom_styles/normal = SubResource( 8 )
script = SubResource( 9 )

[node name="Little_Key7" parent="." instance=ExtResource( 1 )]
margin_top = 258.0
margin_right = 1024.0
margin_bottom = 297.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 10 )
custom_styles/pressed = SubResource( 11 )
custom_styles/normal = SubResource( 12 )
script = SubResource( 13 )

[node name="Little_Key8" parent="." instance=ExtResource( 1 )]
margin_top = 301.0
margin_right = 1024.0
margin_bottom = 340.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 14 )
custom_styles/pressed = SubResource( 15 )
custom_styles/normal = SubResource( 16 )
script = SubResource( 17 )

[node name="Little_Key9" parent="." instance=ExtResource( 1 )]
margin_top = 344.0
margin_right = 1024.0
margin_bottom = 383.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 18 )
custom_styles/pressed = SubResource( 19 )
custom_styles/normal = SubResource( 20 )
script = SubResource( 21 )

[node name="Little_Key10" parent="." instance=ExtResource( 1 )]
margin_top = 387.0
margin_right = 1024.0
margin_bottom = 426.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 22 )
custom_styles/pressed = SubResource( 23 )
custom_styles/normal = SubResource( 24 )
script = SubResource( 25 )

[node name="Little_Key11" parent="." instance=ExtResource( 1 )]
margin_top = 430.0
margin_right = 1024.0
margin_bottom = 469.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 26 )
custom_styles/pressed = SubResource( 27 )
custom_styles/normal = SubResource( 28 )
script = SubResource( 29 )

[node name="Little_Key12" parent="." instance=ExtResource( 1 )]
margin_top = 473.0
margin_right = 1024.0
margin_bottom = 512.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 30 )
custom_styles/pressed = SubResource( 31 )
custom_styles/normal = SubResource( 32 )
script = SubResource( 33 )

[node name="Little_Key13" parent="." instance=ExtResource( 1 )]
margin_top = 516.0
margin_right = 1024.0
margin_bottom = 555.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 34 )
custom_styles/pressed = SubResource( 35 )
custom_styles/normal = SubResource( 36 )
script = SubResource( 37 )

[node name="Little_Key14" parent="." instance=ExtResource( 1 )]
margin_top = 559.0
margin_right = 1024.0
margin_bottom = 600.0
rect_rotation = 0.0
custom_styles/hover = SubResource( 38 )
custom_styles/pressed = SubResource( 39 )
custom_styles/normal = SubResource( 40 )
script = SubResource( 41 )
